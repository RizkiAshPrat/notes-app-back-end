{
	"info": {
		"_postman_id": "6868d95d-56db-493f-8ddb-2acc7145ba66",
		"name": "Dicoding-Notes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17573728"
	},
	"item": [
		{
			"name": "NotesAdd",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Harus response 201\r",
							"pm.test('response status code harus bernilai 201', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//Harus header application/json\r",
							"pm.test('response content-type header harus application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"//Body Harus object\r",
							"pm.test('response harus bernilai objek', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"//Memiliki nilai yang sesuai\r",
							"pm.test('response harus memiliki nilai yang sesuai', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    \r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan Berhasil ditambahkan');\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data harus memiliki property note id dan tidak kosong', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    const { data } = responseJson;\r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals('');\r",
							"\r",
							"    //Simpan noteId\r",
							"    pm.environment.set('noteId', data.noteId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari catatan A\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://3.1.23.123:5000/notes",
					"protocol": "http",
					"host": [
						"3",
						"1",
						"23",
						"123"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "NotesAll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Harus status 200\r",
							"pm.test('response status code harus bernilai 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Header harus application/json\r",
							"pm.test('response harus memiliki header application/json', ()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"//Body harus object\r",
							"pm.test('response harus bernilai objek', ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object')\r",
							"});\r",
							"\r",
							"//Memiliki properti dan nilai tipe data yang sesuai\r",
							"pm.test('response harus memiliki nilai yang sesuai', ()=> {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success')\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"//Response body memiliki array notes dan minimal memiliki 1\r",
							"pm.test('response body harus memiliki notes dan bernilai minimal 1', ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    const {data}=responseJson;\r",
							"\r",
							"    pm.expect(data).to.have.ownProperty('notes');\r",
							"    pm.expect(data.notes).to.be.an('array');\r",
							"    pm.expect(data.notes).lengthOf.at.least(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://3.1.23.123:5000/notes",
					"protocol": "http",
					"host": [
						"3",
						"1",
						"23",
						"123"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "NotesId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Header status 200\r",
							"pm.test('response harus memiliki status 200', ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//response harus memiliki application/json\r",
							"pm.test('response harus memiliki content-type application/json', ()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"//Body response merupakan object\r",
							"pm.test('response pada body merupakan object', ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"//Body response memiliki properti dan nilai atau tipe data yang sesuai\r",
							"pm.test('response harus memiliki nilai yang sesuai', ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"//Response body memiliki property note dan merupakan sebuah objek\r",
							"pm.test('response body harus  memiliki property notes dan  merupakan sebuah objek', ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    const {data} = responseJson;\r",
							"\r",
							"    pm.expect(data).to.ownProperty('note');\r",
							"    pm.expect(data.note).to.be.an('object');\r",
							"});\r",
							"\r",
							"//Objek note memiliki property id, title, body dan tags dan nilai yang sesuai\r",
							"pm.test('response pada objek note memiliki property id, title, body dan tags dan nilai yang sesuai', ()=>{\r",
							"    const responseJson=pm.response.json();\r",
							"    const {data: {note}}=responseJson;\r",
							"\r",
							"    const expectedId = pm.environment.get('noteId');\r",
							"    const expectedTitle = 'Catatan A';\r",
							"    const expectedTags = ['Android', 'Web'];\r",
							"    const expectedBody = 'Isi dari catatan A';\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('id');\r",
							"    pm.expect(note.id).to.equals(expectedId);\r",
							"    pm.expect(note).to.have.ownProperty('title');\r",
							"    pm.expect(note.title).to.equals(expectedTitle);\r",
							"    pm.expect(note).to.have.ownProperty('tags');\r",
							"    pm.expect(note.tags).to.eql(expectedTags);\r",
							"    pm.expect(note).to.have.ownProperty('body');\r",
							"    pm.expect(note.body).to.equals(expectedBody);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://3.1.23.123:5000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"3",
						"1",
						"23",
						"123"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "NotesEdit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Header harus status 200\r",
							"pm.test('response header harus memiliki status 200', ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Harus memiliki nilai application/json\r",
							"pm.test('response harus memiliki content-type application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"//Body response harus berupa object\r",
							"pm.test('response boy harus berupa object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"//Body response memiliki property dan nilai yang sesuai\r",
							"pm.test('response memiliki property dan nilai yang sesuai', ()=>{\r",
							"    const responseJson=pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');\r",
							"});\r",
							"\r",
							"//response harus memiliki notes yang terbaru\r",
							"pm.test('response meminta update', ()=>{\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"\r",
							"    pm.sendRequest(`http://3.1.23.123:5000/notes/${noteId}`, (error, response)=>{\r",
							"        if(!error){\r",
							"            pm.test('maka selanjutnya data harus berisi data terbaru', ()=>{\r",
							"                const responseJson=response.json();\r",
							"                const {data: {note}} = responseJson;\r",
							"\r",
							"                const expectedTitle = 'Catatan A Revised';\r",
							"                const expectedTags = ['Android', 'Web'];\r",
							"                const expectedBody = 'Isi dari Catatan A Revised';\r",
							"\r",
							"                pm.expect(note.title).to.equals(expectedTitle);\r",
							"                pm.expect(note.tags).to.eql(expectedTags);\r",
							"                pm.expect(note.body).to.equals(expectedBody);\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"title\": \"Catatan A Revised\",\r\n   \"tags\": [\"Android\", \"Web\"],\r\n   \"body\": \"Isi dari Catatan A Revised\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://3.1.23.123:5000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"3",
						"1",
						"23",
						"123"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "NotesDel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response header memiliki status 200\r",
							"pm.test('response header memiliki status 200', ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//response harus memiliki header content-type application/json\r",
							"pm.test('response harus memiliki header content-type application/json', ()=> {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"//response body adalah object\r",
							"pm.test('response body adalah object', ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"//response body memiliki property dan nilai yang sesuai\r",
							"pm.test('response body memiliki property dan nilai yang sesuai', ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
							"});\r",
							"\r",
							"//Response hapus harus menghapus data\r",
							"pm.test('ketika request hapus', ()=> {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`http://3.1.23.123:5000/notes/${noteId}`, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('ketika hapus seharusnya data tidak dapat ditemukan', () => {\r",
							"                pm.expect(response.code).to.equals(404);\r",
							"                const responseJson = response.json();\r",
							"                pm.expect(responseJson.status).to.equals('failed');\r",
							"                pm.expect(responseJson.message).to.equals('Catatan gagal dihapus');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://3.1.23.123:5000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"3",
						"1",
						"23",
						"123"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}